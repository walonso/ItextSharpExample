using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;

namespace WebApplication1
{
    /// <summary>
    /// Descripción breve de Handler1
    /// </summary>
    public class Handler1 : IHttpHandler
    {

        public void ProcessRequest(HttpContext context)
        {

            string html = GetHtml();
            byte[] bytes = GetOptionWithParseToList(html); //GetOptionWithParse(html.ToString());

            // Clears all content output from the buffer stream                 
            context.Response.Clear();
            // Gets or sets the HTTP MIME type of the output stream.
            context.Response.ContentType = "application/pdf";
            // Adds an HTTP header to the output stream
            context.Response.AddHeader("Content-Disposition", "attachment; filename=Invoice.pdf");

            //Gets or sets a value indicating whether to buffer output and send it after
            // the complete response is finished processing.
            context.Response.Buffer = true;
            // Sets the Cache-Control header to one of the values of System.Web.HttpCacheability.
            context.Response.Cache.SetCacheability(HttpCacheability.NoCache);
            // Writes a string of binary characters to the HTTP output stream. it write the generated bytes .
            //context.Response.Write(System.Convert.ToBase64String(bytes));
            context.Response.BinaryWrite(bytes);
            // Sends all currently buffered output to the client, stops execution of the
            // page, and raises the System.Web.HttpApplication.EndRequest event.

            context.Response.End();
            // Closes the socket connection to a client. it is a necessary step as you must close the response after doing work.its best approach.
            context.Response.Close();
            //context.Response.ContentType = "text/plain";
            //context.Response.Write("Hola a todos");
        }

        private byte[] GetOptionWithParse(string html)
        {
            StringReader sr = new StringReader(html);
            byte[] bytes;
            Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 0f);
            HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
            using (MemoryStream memoryStream = new MemoryStream())
            {
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, memoryStream);
                pdfDoc.Open();

                htmlparser.Parse(sr);
                pdfDoc.Close();

                bytes = memoryStream.ToArray();
                memoryStream.Close();
            }
            return bytes;
        }

        private byte[] GetOptionWithParseToList(string html)
        {
            MemoryStream ms = new MemoryStream();
            Document document = new Document(PageSize.A4, 10f, 10f, 10f, 0f);
            document.AddAuthor("author");
            document.AddCreationDate();
            document.AddCreator("Walter :)");
            document.AddTitle("soy un ejemplo!!!");
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            document.Open();
            foreach (IElement E in HTMLWorker.ParseToList(new StringReader(html.ToString()), new StyleSheet()))
            {
                document.Add(E);
            }
            document.Close();

            byte[] bytes = ms.ToArray();
            ms.Close();

            return bytes;
        }

        private string GetHtml()
        {
            StringBuilder html = new StringBuilder();
            html.Append("<html><head></head><body><span>este es el html</span>");
            html.Append("<table width='100%' border='1' font size='1'>");
            html.Append("<thead>");
            html.Append("<tr>");
            html.Append("<th class='service'>SERVICE</th>");
            html.Append("<th class='desc'>DESCRIPTION</th>");
            html.Append("<th>PRICE</th>");
            html.Append("<th>QTY</th>");
            html.Append("<th>TOTAL</th>");
            html.Append("</tr>");
            html.Append("</thead>");
            html.Append("<tbody>");
            html.Append("<tr>");
            html.Append("<td align='left' valign='center' style='font - family: Arial; font - size:12px; height: 25px;'>Design</td>");
            html.Append("<td class='desc'>Creating a recognizable design solution based on the company's existing visual identity</td>");
            html.Append("<td class='unit'>$400.00</td>");
            html.Append("<td class='qty'>2</td>");
            html.Append("<td class='total'>$800.00</td>");
            html.Append("</tr>");
            html.Append("<tr>");
            html.Append("<td colspan='4'>SUBTOTAL</td>");
            html.Append("<td class='total'>$800.00</td>");
            html.Append("</tr>");
            html.Append("<tr>");
            html.Append("<td colspan='4' style='color: red;'>TAX 25%</td>");
            html.Append("<td class='total'>$200.00</td>");
            html.Append("</tr>");
            html.Append("<tr>");
            html.Append("<td colspan='4' class='grand total'><img src='http://lineadecodigo.com/wp-content/uploads/2006/11/html.png' alt='Simply Easy Learning' width='200' height = '80' /></td>");
            html.Append("<td class='grand total'>$1,000.00</td>");
            html.Append("</tr>");
            html.Append("</tbody>");
            html.Append("</table>");
            html.Append("</body></html>");
            return html.ToString();
        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}